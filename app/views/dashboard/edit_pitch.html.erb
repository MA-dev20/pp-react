<section id="new-pitch-navbar">
	<h1>Pitch erstellen</h1>
	<div class="btn-group">
		<%= link_to 'Exit', dashboard_pitches_path, class: 'btn reversed'%>
		<button class="btn done-btn open-modal" data-modal="pitch-modal">Done</button>
	</div>
</section>

<div id="new-pitch-content">
	<div class="card left">
		<div class="tasks" id="tasksScrollBar">
			<% @pitch.task_orders.order(:order).each do |t| %>
			<div class="card left-card <%= @task && @task.id == t.task_id ? 'selected' : '' %>"
				id="task_<%= t.task_id %>" draggable="true" ondragstart="drag(event)"
				ondrop="dropOrder(event, <%= t.order %>)" ondragleave="leaveDrop(event)" ondragover="allowDrop(event)"
				data-id="<%= t.id %>">
				<div class="task-link" onclick="selectTask(<%= t.task_id %>)"></div>
				<% if t.task.task_type != "slide" %>
				<div class="task-title">
					<div class="select-task-link" onclick="selectTask(<%= t.task_id %>)"></div>
					<% if !t.task.valide %>
					<i class="fas fa-exclamation-triangle"></i>
					<% end %>
					<div class="name"><%= t.order %>. Task</div>
					<!-- <i class="fas fa-circle"></i> -->
					<%= link_to '', delete_task_path(@pitch, t.id), class: 'fas fa-trash remove remove-task', data: {confirm: 'Willst du die Aufgabe wirklich löschen?'}%>
					<%= link_to '', copy_task_path(@pitch, t.id), class: 'fas fa-copy copy copy-task' %>
				</div>
				<div class="task-subtitle task-name">
					<%= t.task.title&.titleize %>
					<%# media_type = t.task.task_medium&.media_type&.titleize %>
					<%#= media_type = media_type.present? ? media_type : t.task.task_type&.titleize %>
				</div>
				<% if t.task.task_medium && t.task.task_medium.video? %>
				<% image_url = t.task.task_medium.video.thumb.url %>
				<% elsif t.task.task_medium && t.task.task_medium.image? %>
				<% image_url = t.task.task_medium.image.url %>
				<% else %>
				<% image_url = nil %>
				<% end %>
				<div class="thumb <%= 'thumb-border' unless image_url.present? %>">
					<% if t.task.task_medium && t.task.task_medium.video? %>
					<%= image_tag t.task.task_medium.video.thumb.url, class: 'image' %>
					<% elsif t.task.task_medium && t.task.task_medium.image? %>
					<%= image_tag t.task.task_medium.image.url, class: 'image' %>
					<% else %>
					<%= image_tag 'dash/no-image-icon.png', class: 'no-image-icon' %>
					<% end %>
					<% if t.task.time %>
					<div class="length">
						<%= (t.task.time / 60).to_s %>:<%= (t.task.time % 60) < 10 ? '0' + (t.task.time % 60).to_s : (t.task.time % 60).to_s %>
					</div>
					<% else %>
					<div class="length">1:20</div>
					<% end %>
				</div>
				<!-- <div class="title"><%= t.task.title %></div> -->
				<div class="task-subtitle">Rating criteria:</div>
				<div class="rating-criteria">
					<% criteria_count = t.task&.rating_list&.rating_criteria&.count %>
					<% if t.task.rating_list %>
					<% t.task.rating_list.rating_criteria.each do |rating| %>
					<div class="criterium"><%= rating.name %></div>
					<% end %>
					<% end %>
					<% criteria_count = 4 - (criteria_count.present? ? criteria_count : 0) %>
					<% criteria_count.times do |time| %>
					<div class="criterium">-</div>
					<% end %>
				</div>
				<% else %>
				<div class="task-title">
					<div class="select-task-link" onclick="selectTask(<%= t.task_id %>)"></div>
					<div class="name"><%= t.order %>. Slide</div>
					<%= link_to '', delete_task_path(@pitch, t.id), class: 'fas fa-trash remove', data: {confirm: 'Willst du die Aufgabe wirklich löschen?'}%>
					<%= link_to '', copy_task_path(@pitch, t.id), class: 'fas fa-copy copy' %>
				</div>
				<div class="task-subtitle task-name">
					<%= t.task.title&.titleize %>
				</div>
				<div class="thumb slide">
					<% if t.task.task_medium && t.task.task_medium.video? %>
					<%= image_tag t.task.task_medium.video.thumb.url %>
					<% elsif t.task.task_medium && t.task.task_medium.image? %>
					<%= image_tag t.task.task_medium.image.url %>
					<% else %>
					<%= image_tag 'dash/Image.png' %>
					<% end %>
				</div>
				<% end %>
			</div>
			<% end %>
			<% if @pitch.tasks.count == 0 %>
			<div class="form-group add-first-task">
				<button class="btn" onclick="addTask()">Add first task</button>
			</div>
			<% end %>
			<%= form_for :task_medium, url: create_task_media_path(@pitch), html: {id: "add_pdf_form"} do |t| %>
			<div class="menu-box">
				<div class="menu" onclick="addTask()">Add task</div>
				<div class="menu task-pitch">Add task from existing pitch</div>
				<label for="task_medium_pdf" class="menu">Import PDF</label>
			</div>
			<%= t.file_field :pdf, accept: '.pdf'%>
			<%= t.hidden_field :media_type, value: 'pdf' %>
			<% end %>
			<div class="add-task">
				<%= image_tag 'dash/icons/circle-plus-green.svg', class: 'add-task-img open-modal', data: { modal: "option-modal" } %>
			</div>
		</div>
	</div>

	<div class="card right">
		<% if @task && @task.task_type == 'slide' %>
		<%= render partial: 'dashboard/pitches/new_pdf' %>
		<% elsif @task %>
		<%= render partial: 'dashboard/pitches/new_task' %>
		<% end %>

		<%= render partial: 'dashboard/pitches/browse_tasks', locals: { pitches: @pitches } %>

		
	</div>

	<%= render partial: 'pitch_modal', locals: { pitch: @pitch } %>

	<%= render partial: 'options_modal', locals: { pitch: @pitch } %>

</div>

<div id="loaderModal" class="modal hide">
	<div class="modal-content">
		<div class="inner-content">
			<div class="loader-img">
				<!-- <i class="fa fa-spinner" aria-hidden="true"></i> -->
				<!-- <i class="fas fa-spinner"></i> -->
				<div id="loading-bar-spinner" class="spinner"><div class="spinner-icon"></div></div>
			</div>
		</div>
	</div>
</div>


<div id="videoModal" class="modal hide">
	<div class="modal-content">
		<span class="close">&times;</span>
		<div class="heading">
			<h1>Record your video</h1>
			<input type="file" accept="video/*" capture>
		</div>
		<div class="inner-content">
			<div class="video">
				<video src="" id="recorder" autoplay></video>
				<video src="" id="player"></video>
				<div class="navigator">
					<div class="stop" id="stopVideo"><i class="far fa-stop-circle"></i></div>
					<div id="record_video" class="videorecord"><i class="far fa-dot-circle"></i></div>
					<div class="play" id="playVideo" onclick="playVideo()"><i class="far fa-play-circle"></i>
					</div>
				</div>
			</div>
			<div class="buttons">
				<a href="" class="btn reversed" id="clodeVideoModal">Cancel</a>
				<a href="" class="btn" id="videoUpload">Upload</a>
			</div>
		</div>
	</div>
</div>
<script>
		// $('#loaderModal').show();

	// function removeSlide(e) {
	// 	$(e.target).siblings('.hidden-remove-task').click();
	// 	e.stopPropagation();
	// }

	// $('.remove-task').on('click', function(e) {
	// 	e.preventDefault();
	// 	e.stopPropagation();	
	// })
	$('#clodeVideoModal').on('click', function (e) {
		e.preventDefault();
		$('#videoModal').hide();
	});

	$('#add_ol_form').on('submit', function (e) {
		e.preventDefault();
		var formData = new FormData(document.getElementById('add_ol_form'));
		commitList('objection', formData);
	})

	function sendList(type, ListID) {
		var formData = new FormData();
		formData.append("list[list_id]", ListID);
		commitList(type, formData);
	}
	var recorder = document.getElementById('recorder');
	var player = document.getElementById('player');
	var file = NaN;
	var mediaRecorder;
	var video_upload_click = false;
	var handleSuccess = function (stream) {
		$('.videorecord i').removeClass('fa-dot-circle');
		$('.videorecord i').addClass('fa-stop-circle');
		$('.videorecord').addClass('pulse');
		$('#recorder').show();
		$('#player').hide();
		const options = { mimeType: 'video/webm' };
		const recordedChunks = [];
		mediaRecorder = new MediaRecorder(stream, options);
		recorder.srcObject = stream;
		mediaRecorder.start();
		mediaRecorder.addEventListener('start', function () {
			console.log('stream started..');
		})
		mediaRecorder.addEventListener('dataavailable', function (e) {
			if (e.data.size > 0) {
				console.log('streaming ...');
				recordedChunks.push(e.data);
			}
		});
		mediaRecorder.addEventListener('stop', function () {
			stream.getTracks().forEach(track => track.stop())
			console.log('stream stopped');
			var blob = new Blob(recordedChunks);
			videoURL = URL.createObjectURL(blob);
			file = new window.File([blob], ["video", (new Date() + '').slice(4, 28), '.webm'].join(''))
			player.src = videoURL;
			$('#player').show();
			$('#recorder').hide();
			recorder.load();
			console.log('stream saved');
			$('.videorecord i').removeClass('fa-stop-circle');
			$('.videorecord i').addClass('fa-dot-circle');
			$('.videorecord').removeClass('pulse');
			$('#stopVideo').css('display', 'inline-block');
			$('#playVideo').css('display', 'inline-block');
			stream = NaN;

			if (video_upload_click) {
				var globalForm = new FormData();
				globalForm.append('task_medium[video]', file);
				globalForm.append('task_medium[media_type]', 'video');
				sendMedia(globalForm);
			}
		});
		document.getElementById('stopVideo').addEventListener('click', function () {
			mediaRecorder.stop();
		})
		document.getElementById('videoUpload').addEventListener('click', function (e) {
			e.preventDefault();
			if (file != NaN) {
				$('#videoModal').hide()
				if ($('#record_video').hasClass('pulse')) {
					video_upload_click = true;
					mediaRecorder.stop();
				} else {
					video_upload_click = false;
					var globalForm = new FormData();
					globalForm.append('task_medium[video]', file);
					globalForm.append('task_medium[media_type]', 'video');
					sendMedia(globalForm);
				}
			} else {
				$('#videoModal').hide()
				video_upload_click = false;
			}
		})
	}
	document.getElementById('record_video').addEventListener('click', function () {
		if ($('#record_video').hasClass('pulse')) {
			mediaRecorder.stop();
		} else {
			navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(handleSuccess).catch(function (err) { alert('Kann Video nicht aufnehmen!') });
		}
	})
	function playVideo() {
		var player = document.getElementById('player');
		if ($('#playVideo i').hasClass("fa-play-circle")) {
			$('#playVideo i').addClass('fa-pause-circle');
			$('#playVideo i').removeClass('fa-play-circle');
			player.play();
			player.addEventListener('ended', function () {
				$('#playVideo i').addClass('fa-play-circle');
				$('#playVideo i').removeClass('fa-pause-circle');
			})
		} else {
			$('#playVideo i').addClass('fa-play-circle');
			$('#playVideo i').removeClass('fa-pause-circle');
			player.pause();
		}
	}

</script>
<div class="blur hide warning-card-wrapper">
	<div class="card" id="warningCard">
		<i class="fa fa-exclamation-circle" aria-hidden="true"></i>
		<h1>Sure you want to switch task format?</h1>
		<p>In this case your uploaded media will be replaced.</p>
		<div class="buttons">
			<button class="btn reversed cancel-btn" data-value="cancel">Cancel</button>
			<button class="btn reversed ok-btn" data-value="ok">Ok</button>
		</div>
	</div>
</div>

<script>

	var global_event = '';
	var global_file = '';
	var global_method = '';
	var field_id = '';
	var mediaDeleted = false;
	var cwListId = 0;

	$('.warning-card-wrapper .btn').unbind().on('click', function () {
		let response = $(this).attr('data-value') === 'ok';
		if (response) {
			deleteMedia(global_method === 'cw' ? 'cw' : '');
			mediaDeleted = true
			if (global_method === 'upload') {
				$(`#${field_id}`).click();
			} else if (global_method === 'imageDragDrop')
				handleImageUpload(global_event);
			else if (global_method === 'videoDragDrop')
				handleVideoUpload(global_event);
			else if (global_method === 'audioDragDrop')
				handleAudioUpload(global_event);
			else if (global_method === 'video')
				$('#videoModal').show()
			else if (global_method === 'audio')
				$('.record').click();
			else if (global_method === 'cw')
				submitCwForm();
			else if (global_method === 'catchwordList')
				sendList('catchword', cwListId);
		}
		field_id, global_event, global_method, global_file = '';
		cwListId = 0;
		$('.warning-card-wrapper').hide();
		return false;
	})

	function loadFile(e, type = '') {
		const id = $(e.target).attr('id');
		let mediaOption = $(`#${id}`).closest('.media-option').find('.preview');
		let file = event.target.files[0];
		if (type === 'video') {
			let $that = $(event.currentTarget);
			let $preview = $(event.currentTarget).siblings('.preview');
			let $video_tag = $preview.find('video');
			$video_tag[0].src = URL.createObjectURL(file);
			$video_tag.show();
		} else {
			$(e.target).closest('.image-drop-zone').hide();
			let $img = $(mediaOption).find('img');
			let url_object = URL.createObjectURL(file);
			$img[0].src = url_object;
			if (type === 'task-img')
				$('.left-card.selected img')[0].src = url_object;
		}
		$(mediaOption).show();
	}

	function removePitchMedia(e, type = '') {
		if (type === 'video') {
			$('.pitch-video-file').attr('src', '');
			$('.video-preview').hide();
			$('#pitch_video').val('');
			$('.destroy-video').val(true);
		} else {
			$('.image-preview').hide();
			$('#pitch_image').val('');
			$('.destroy-image').val(true);
		}
	}

	function loadMetaData(e) {
		if ($(e.target)[0].duration === Infinity) {
			$(e.target).siblings('.time').text('');
		} else {
			const video_duration = new Date($(e.target)[0].duration * 1000).toISOString().substr(11, 8)
			$(e.target).siblings('.time').text(video_duration);
		}
	}


	$('.task-pitch').click(function () {
		$('.option-modal').hide();
		$('.menu-box, #new_task_form, .card.right .card, .pitch-tasks-div, .slide-preview').hide();
		$('#pitches, #pitches .card, .pitch-list, .browse-tasks-partial').show();

		//Browse pitch tasks 
		$('.pitches-header').text('Pitches');
		$('.pitch-tasks-list .ps__rail-y').hide();
		$('.pitch-list .ps__rail-y').show();
		$('#searchPitch').attr('data-pitch-id', '');
	})

	$('.open-modal').click(function (e) {
		// $('#new_pitch_form').show();
		$('.remove-option').hide();
		$(`.${$(this).data("modal")}`).toggle();
	})

	$('.close').click(function () {
		$('.remove-option').show();
		$('.modal').hide()
	})

	function allowDrop(ev) {
		ev.preventDefault();
		$('.selected').removeClass('selected');
		$(ev.target).closest('.card').addClass("drop-here");
	}
	function leaveDrop(ev) {
		$(ev.target).closest('.card').removeClass("drop-here");
	}
	function drag(e) {
		e.dataTransfer.setData('ID', e.target.getAttribute('data-id'));
	}
	function dropOrder(e, order) {
		e.preventDefault();
		var tID = e.dataTransfer.getData('ID');
		setOrder(tID, order);
	}
	function setOrder(tId, order) {
		var url = '/pitches/<%= @pitch.id %>/tasks/' + tId + '/setOrder/' + order;
		$.ajax({
			url: url,
			type: 'put',
			cache: false,
			async: true,
			contentType: false,
			processData: false,
			beforeSend: function (xhr) { xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content')) },
			success: function (res) {
				selectTask(res.id);
			},
		})
	}

	$('.import-PDF').on('click', function () {
		$('#task_medium_pdf').click();
	})

	$('#task_medium_pdf').on('change', function () {
		$('.option-modal').hide();
		var globalForm = new FormData(document.getElementById('add_pdf_form'));
		sendMediaPDF(globalForm);
	})

	function sendMediaPDF(globalForm) {
		var url = "<%= create_task_media_url(@pitch) %>";
		$('#loaderModal').show();
		$.ajax({
			url: url,
			type: 'post',
			cache: false,
			async: true,
			contentType: false,
			processData: false,
			data: globalForm,
			beforeSend: function (xhr) { xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content')) },
			success: function (res) {
				$('#loaderModal').hide();
				<% if @pitch.tasks.count != 0 %>
					selectTask(<%= @pitch.tasks.last.id %>);
				<% end %>
			}
		})
	}

	new PerfectScrollbar('#tasksScrollBar');
	// $('.add-task-img').on('click', function () {
	// 	$('.menu-box').toggle()
	// })
	function addTask() {
		window.location.replace("<%= create_task_path(@pitch) %>");
	}
	function selectTask(task_id) {
	  <% if @task %>
		var globalForm = new FormData(document.getElementById('new_task_form'));
		$.ajax({
			url: '<%= update_task_path(@pitch, @task) %>',
			type: 'post',
			cache: false,
			async: true,
			contentType: false,
			processData: false,
			data: globalForm,
			beforeSend: function (xhr) { xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content')) },
			success: function (res) {
				var URL = '<%= dashboard_edit_pitch_path(@pitch) %>?task_id=' + task_id;
				window.location.replace(URL);
				// showTaskMedia("<%= @task.task_type %>");
			}
		})
			<% else %>
			var URL = '<%= dashboard_edit_pitch_path(@pitch) %>?task_id=' + task_id;
		window.location.replace(URL);
	  <% end %>
	}
	<% if @task %>
		$('#tasksScrollBar').animate({
			scrollTop: $("#task_<%= @task.id %>").offset().top - $('#tasksScrollBar').offset().top - 10
		}, 50);
	<% end %>
</script>