<%= form_for :task, url: update_task_path(@pitch, @task), html: {id: "new_task_form"} do |f| %>
<div class="form-group title">
	<%= f.hidden_field :user_id, value: @admin.id %>
	<%= f.text_field :title, class: 'form-field', placeholder: 'Tippen, um Aufgabe hinzuzufügen, bspw. "Verkaufe das Catchword an einen Bestandskunden"' %>
</div>

<div class="card time-limit">
	<div class="title">Time limit</div>
	<div class="subline">Set your time limit.</div>
	<div class="form-group">
		<div class="time-field">
			<% if @task.time %>
			<%= f.hidden_field :time, id: 'task_time', value: @task.time %>
			<div class="time" id="set_task_time">
				<%= (@task.time / 60).to_s %>:<%= (@task.time % 60) < 10 ? '0' + (@task.time % 60).to_s : (@task.time % 60).to_s %>
			</div>
			<% else %>
			<%= f.hidden_field :time, id: 'task_time', value: 80 %>
			<div class="time" id="set_task_time">1:20</div>
			<% end %>
			<i class="fa fa-angle-up up" onclick="timeUp()"></i>
			<i class="fa fa-angle-down down" onclick="timeDown()"></i>
		</div>
	</div>
</div>
<%= f.hidden_field :task_type %>
<%= f.hidden_field :catchword_list_id %>
<%= f.hidden_field :task_medium_id %>
<% end %>

<div class="main-card-row1">
	<div class="add-cw-add-rating">
		<div class="card add-catchword">
			<% 
			media_type = @task.task_medium&.media_type&.titleize
			media_type = media_type.present? ? media_type : @task.task_type&.titleize 
			%>
			<div class="catchword-heading catchword">
				<div class="title">Text, Video oder Bild hinzufügen!</div>
				<div class="form-group">
					<div class="cw custom-select" onclick="showOptions()">
						<label><%= media_type.present? ? media_type.titleize : 'Catchword' %></label>
						<div class="sub-cs media-options">
							<div class="option catchword-option" onclick="handleOptionClick('catchword', event)">
								<span class="basket-name vw">Catchword</span>
							</div>
							<div class="option image-option" onclick="handleOptionClick('image', event)">
								<span class="basket-name vw">Image</span>
							</div>
							<div class="option video-option" onclick="handleOptionClick('video', event)">
								<span class="basket-name vw">Video</span>
							</div>
							<div class="option audio-option" onclick="handleOptionClick('audio', event)">
								<span class="basket-name vw">Audio</span>
							</div>
						</div>
					</div>
				</div>
			</div>

			<div class="hr-line"></div>

			<div class="catchword media-option">
				<%= form_for :list, url: create_task_list_path(@task, type: 'catchword'), html: {id: "add_cw_form"} do |cw| %>
				<div class="title">Catchwords</div>
				<div class="subline">Type your Catchword or choose from list below</div>
				<div class="form-group fields">
					<%= cw.text_field :name, placeholder: 'Type your catchword', value: '', class: 'form-field' %>
					<div class="add-cw">
						<img class="add-cw-img"
							src="/assets/dash/icons/circle-plus-green-6f379cf9ada9e3c614b12acce45f0caaebcde37cfa1f3009a7a9fa11d6dfa257.svg">
					</div>
					<div class="cw custom-select" onclick="openList('catchword')">Catchword
						<div class="sub-cs" id="cw-options">
							<% @cw_lists.each do |list| %>
							<div class="option" onclick="handleClick('catchword', '<%= list.id %>')">
								<span class="basket-name vw"><%= list.name %></span>
							</div>
							<% end %>
						</div>
					</div>
				</div>
				<% if @task.catchword_list&.catchwords&.present? %>
				<div class="title list-title">List</div>
				<% end %>
				<div class="words-list cw-list">
					<% if @task.catchword_list %>
					<% @task.catchword_list.catchwords.each do |cw| %>
					<div class="hr-line"></div>
					<div class="words-wrapper">
						<div class="word"><%= cw.name %></div>
						<%= link_to '', delete_task_words_path(@pitch, task_id: @task.id, word_id: cw.id, type: 'catchword'), method: :delete, class: 'fas fa-trash remove' %>
					</div>
					<% end %>
					<% end %>
				</div>
				<script>
					var cw_count = '<%= @task.catchword_list&.catchwords&.count %>'
					console.log(cw_count);
					if (cw_count !== '' && (Number(cw_count) > 4)) {
						new PerfectScrollbar('.cw-list');
					}
				</script>
				<div class="info">If more than one catchword is chosen, we will choose one of them randomly for this
					task.
				</div>
				<% end %>
				<script>
					$('#add_cw_form').on('submit', function (e) {
						e.preventDefault();
						if ($('#add_cw_form .form-field').val().length > 0) {
							global_method = 'cw'
							if (isOtherMediaExists()) {
								$('.warning-card-wrapper').show();
							} else {
								submitCwForm();
							}
						} else {
							return false;
						}
					})
					function submitCwForm() {
						$('#task_task_type').val('catchword');
						var formData = new FormData(document.getElementById('add_cw_form'));
						commitList('catchword', formData);
					}

					function sendList(type, ListID) {
						var formData = new FormData();
						formData.append("list[list_id]", ListID);
						commitList(type, formData);
					}

					function handleClick(type, ListID) {
						global_method = 'catchwordList'
						cwListId = ListID;
						if (isOtherMediaExists()) {
							$('.warning-card-wrapper').show();
						} else {
							sendList(type, ListID);
						}
					}

					function showOptions() {
						$('.catchword-heading .media-options').toggle();
					}

					function handleOptionClick(type, e) {
						e.stopPropagation();
						$('.catchword-heading .option').show();
						$('.catchword-heading .media-options .option').removeClass('active').addClass('not-active');
						$(`.${type}-option`).hide();
						$(`.${type}-option`).removeClass('not-active').addClass('active');
						$('.add-catchword .media-option').hide();
						$(`.add-catchword .${type}.media-option`).show();
						$('.catchword-heading .custom-select label').text(type);
						$('.catchword-heading .media-options').toggle();
					}

					function commitList(type, formData) {
						var url = "<%= create_task_list_path(@task) %>?type=" + type;
						$.ajax({
							url: url,
							type: 'post',
							cache: false,
							async: true,
							contentType: false,
							processData: false,
							data: formData,
							beforeSend: function (xhr) { xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content')) },
							success: function (res) {
								// if (type == 'catchword') {
								// 	$('#task_catchword_list_id').val(res.id);
								// 	$('.catchword.media-option').show();
								// 	if (mediaDeleted) {
								// 		$('#task_task_medium_id').val('');
								// 	}
								// } else if (type == 'objection') {
								// 	$('#task_objection_list_id').val(res.id);
								// } else if (type == 'rating') {
								// 	$('#task_rating_list_id').val(res.id);
								// }
								// mediaDeleted = false;
								// selectTask(<%= @task.id %>);
					}
					})
				}
					function openList(type) {
						if (type == 'catchword') {
							$('#cw-options').toggle();
						} else if (type == 'objection') {
							$('#ol-options').toggle();
						}
					}
				</script>
			</div>

			<div class="picture image media-option">
				<%= form_for :task_medium, url: create_task_media_path(@pitch, task_id: @task.id), html: {id: "add_image_form"} do |t| %>
				<div class="title">Image</div>
				<!-- <div class="subline">Upload an image to your pitch</div> -->
				<!-- <label for="task_medium_image" class="btn upload" id="image_upload_btn">Upload</label> -->
				<%#= t.file_field :image, accept: 'image/*' %>
				<%#= t.hidden_field :media_type, value: 'image' %>
				<div class="preview"
					style="display: <%= @task.task_medium && @task.task_medium.image? ? 'block' : 'none' %>">
					<% if @task.task_medium && @task.task_medium.image? %>
					<div class="remove-option">
						<label><%= File.basename(@task.task_medium.image.url) %></label>
						<%= link_to '', delete_task_media_path(@pitch, task_id: @task.id, type: 'image'), method: :delete, class: 'fas fa-trash remove', data: {confirm: 'Willst du die Aufgabe wirklich löschen?'} %>
					</div>
					<%= image_tag @task.task_medium.image.url %>
					<% else %>
					<img src="" alt="">
					<% end %>
				</div>
				<div class="dropzone-container image-drop-zone"
					style="<%= 'display: none;' if @task.task_medium && @task.task_medium.image? %>">
					<label class="dropzone-text">Drag and Drop file from your Computer</label>
					<div class="label-btn">
						<%= t.file_field :image, class: 'image-fileinput', accept: 'image/*' %>
						<%= t.hidden_field :media_type, value: 'image' %>
						<label class="btn reversed upload" id="image_upload_btn">Upload from Computer</label>
						<label class="btn reversed upload image-library" id="">Image library</label>
					</div>
				</div>
				<% end %>
			</div>
			<div class="popup" id="popup">
				<div class="img-container">
					<%= image_tag '', id: 'media_image' %>
				</div>
				<div class="center">
					<div class="btn btn-green" id="crop">speichern</div>
				</div>
				<div class="close" onclick="hidePopup()"><i class="fas fa-times"></i></div>
			</div>

			<div class="video media-option">
				<%= form_for :task_medium, url: create_task_media_path(@pitch, task_id: @task.id), html: {id: "add_video_form"} do |t| %>
				<div class="title">Video</div>
				<!-- <div class="subline">Upload an Video to your pitch</div> -->
				<!-- <label for="task_medium_video" class="btn upload" id="video_upload_btn">Upload</label> -->
				<%#= t.file_field :video %>
				<%#= t.hidden_field :media_type, value: 'video' %>
				<div class="preview video-preview"
					style="display: <%= @task.task_medium && @task.task_medium.video? ? 'block' : 'none' %>">
					<% if @task.task_medium && @task.task_medium.video? %>
					<!-- <div class="time">
					<%= (@task.task_medium.duration / 60).to_s %>:<%= (@task.task_medium.duration % 60) < 10 ? '0' + (@task.task_medium.duration % 60).to_s : (@task.task_medium.duration % 60).to_s %>
				</div> -->
					<!-- <div class="remove" onclick="removeMedia(event, 'video')">remove</div> -->
					<%#= link_to "remove", delete_task_media_path(@pitch, task_id: @task.id, type: 'video'), method: :delete, class: 'remove' %>
					<div class="remove-option">
						<label><%= File.basename(@task.task_medium.video.url) %></label>
						<%= link_to '', delete_task_media_path(@pitch, task_id: @task.id, type: 'video'), method: :delete, class: 'fas fa-trash remove', data: {confirm: 'Willst du die Aufgabe wirklich löschen?'} %>
					</div>
					<%= video_tag @task.task_medium.video.url, controls: true, class: 'video-tag' %>
					<% else %>
					<div class="time"></div>
					<video class="video-tag" src="" controls></video>
					<!-- <iframe width="420" height="345" src="https://www.youtube.com/embed/tgbNymZ7vqY">
				</iframe> -->
					<% end %>
				</div>
				<div class="dropzone-container video-drop-zone"
					style="<%= 'display: none;' if @task.task_medium && @task.task_medium.video? %>">
					<label class="dropzone-text">Drag and Drop file from your Computer</label>
					<div class="label-btn">
						<%= t.file_field :video, accept: 'video/*', class: 'video-field' %>
						<%#= t.hidden_field :video_id, class: 'video-id' %>
						<%= t.hidden_field :media_type, value: 'video' %>
						<div class="btn-wrapper">
							<label class="btn reversed upload" id="video_upload_btn">Upload from computer</label>
							<div class="btn reversed upload open-modal record-video">Record</div>
						</div>
						<div class="video-form">
							<label for="">You can also past a link to your video on Youtube or Vimeo</label>
							<div class="form-group">
								<input type="text" class="form-field" id="videoLink" placeholder="Youtube/Vimeo link">
								<%= image_tag 'dash/icons/circle-plus-green.svg', class: 'add add-video-link' %>
							</div>
						</div>
					</div>
				</div>
				<% end %>
			</div>

			<div class="audio media-option">
				<%= form_for :task_medium, url: create_task_media_path(@pitch, task_id: @task.id), html: {id: 'add_audio_form'} do |t| %>
				<div class="title">Audio</div>
				<!-- <div class="subline">Upload an audio file to your pitch</div> -->
				<!-- <label for="task_medium_audio" class="btn upload">Upload</label> -->
				<%= t.file_field :audio %>
				<%= t.hidden_field :media_type, value: 'audio' %>
				<div class="preview audio-preview"
					style="display: <%= @task.task_medium && @task.task_medium.audio? ? 'block' : 'none' %>">
					<% if @task.task_medium && @task.task_medium.audio? %>
					<!-- <div class="audio-title"><%= @task.task_medium.audio.identifier %></div> -->
					<div class="remove-option">
						<label><%= File.basename(@task.task_medium.audio.url) %></label>
						<%= link_to '', delete_task_media_path(@pitch, task_id: @task.id, type: 'audio'), method: :delete, class: 'fas fa-trash remove', data: {confirm: 'Willst du die Aufgabe wirklich löschen?'} %>
					</div>
					<div class="audio-play-div">
						<%#= image_tag 'dash/icons/audio-play-icon.svg', class: 'play-audio audio-play-circle', onclick: 'playAudio()' %>
						<i class="fa fa-play-circle play-audio audio-play-circle" onclick="playAudio()"></i>
						<i class="pause-audio fas fa-pause-circle audio-pause-circle" onclick="pauseAudio()"></i>
						<!-- <i class="fas fa-play-circle play-audio" onclick="playAudio()"></i> -->
					</div>
					<%= audio_tag @task.task_medium.audio.url, id: 'task-audio', class: 'audio-tag', onended: 'stopAudio()' %>
					<%#= link_to "remove", delete_task_media_path(@pitch, task_id: @task.id, type: 'audio'), method: :delete, class: 'remove' %>
					<% else %>
					<div class="audio-title"></div>
					<audio src="" id="task-audio" class="audio-tag"></audio>
					<div class="remove">remove</div>
					<% end %>
				</div>
				<div class="dropzone-container audio-drop-zone"
					style="<%= 'display: none;' if @task.task_medium && @task.task_medium.audio? %>">
					<label class="dropzone-text">Drag and Drop file from your Computer</label>
					<div class="label-btn">
						<%= t.file_field :audio, accept: '.mp3,.wav', class: 'audio-field' %>
						<%#= f.hidden_field :audio_id, class: 'audio-id' %>
						<%= t.hidden_field :media_type, value: 'audio' %>
						<label class="btn reversed upload" id="audio_upload_btn">Upload from computer</label>
						<div class="btn reversed upload record">Record</div>
					</div>
				</div>
				<% end %>

			</div>
			<%= link_to "", delete_task_media_path(@pitch, task_id: @task.id), method: :delete, id: 'removeMedia' %>

		</div>
		<div class="card add-rating">
			<%= form_for :task, url: create_ratings_path(@pitch, task_id: @task.id), html: {id: "add_rating_form"} do |f| %>
			<div class="title">Rating Criteria</div>
			<div class="subline">You can add up to 4 rating criterias</div>
			<div class="form-group-wrapper">
				<div class="form-group">
					<div class="star"><%= image_tag 'dash/icons/star.svg'%></div>
					<%= f.text_field :rating1, class: 'form-field rating-field', placeholder: 'Type new rating criteria', onblur: 'looseFocus(event)' %>
					<%#= image_tag 'dash/icons/circle-plus-green.svg', class: 'add-rating add add-rating-btn' %>
				</div>
				<div class="form-group">
					<div class="star"><%= image_tag 'dash/icons/criteria2.svg'%></div>
					<%= f.text_field :rating2, class: 'form-field rating-field', placeholder: 'Type new rating criteria', onblur: 'looseFocus(event)' %>
				</div>
			</div>
			<div class="form-group-wrapper">
				<div class="form-group">
					<div class="star"><%= image_tag 'dash/icons/criteria3.svg'%></div>
					<%= f.text_field :rating3, class: 'form-field rating-field', placeholder: 'Type new rating criteria', onblur: 'looseFocus(event)' %>
					<%#= image_tag 'dash/icons/circle-plus-green.svg', class: 'add-rating add add-rating-btn' %>
				</div>
				<div class="form-group">
					<div class="star"><%= image_tag 'dash/icons/criteria4.svg'%></div>
					<%= f.text_field :rating4, class: 'form-field rating-field', placeholder: 'Type new rating criteria', onblur: 'looseFocus(event)' %>
				</div>
			</div>
			<% end %>
		</div>
	</div>
	<div class="card add-reaction">
		<div class="checkbox-container">
			<div class="form-group" id="show_ratings">
				<div class="skip-election-group">
					<label class="title">Reactions</label>
					<%#= image_tag 'dash/Checkbox.svg', onclick: "showReactions()" %>
					<i class="far fa-check-square" id="reactionCheck" onclick="showReactions()"></i>
				</div>
			</div>
		</div>
		<%= form_for :list, url: create_task_list_path(@task, list: 'objection'), html: {id: "add_ol_form"} do |f| %>
		<!-- <div class="title">Reactions</div> -->
		<div class="subline">Type new reactions or choose from list below</div>
		<div class="form-group">
			<div class="reaction-input-field-div">
				<%= f.text_field :name , placeholder: "Type your reactions", value: '', class: 'form-field' %>
				<div class="add-cw">
					<img class="add-cw-img"
						src="/assets/dash/icons/circle-plus-green-6f379cf9ada9e3c614b12acce45f0caaebcde37cfa1f3009a7a9fa11d6dfa257.svg">
				</div>
			</div>
			<div class="ol custom-select" onclick="openList('objection')">Reactions
				<div class="sub-cs" id="ol-options">
					<% @ol_list.each do |list| %>
					<div class="option" onclick="sendList('objection', '<%= list.id %>')">
						<span class="basker-name vw"><%= list.name %></span>
					</div>
					<% end %>
				</div>
			</div>
		</div>
		<% if @task.objection_list&.objections&.present? %>
		<div class="title">List</div>
		<% end %>
		<div class="words-list ow-list">
			<% if @task.objection_list.present? %>
			<% @task.objection_list.objections.each do |ow| %>
			<div class="hr-line"></div>
			<div class="words-wrapper">
				<div class="word"><%= ow.name %></div>
				<!-- <a class="fas fa-trash remove"></a> -->
				<%= link_to '', delete_task_words_path(@pitch, task_id: @task.id, word_id: ow.id, type: 'objection'), method: :delete, class: 'fas fa-trash remove' %>
			</div>
			<% end %>
			<% end %>
		</div>
		<script>
			var ow_count = '<%= @task.objection_list&.objections&.count %>'
			if (ow_count !== '' && (Number(ow_count) > 3)) {
				new PerfectScrollbar('.ow-list');
			}
		</script>
		<% end %>
	</div>
</div>

<script>

	function showReactions() {
		if ($('#reactionCheck').hasClass('fa-check-square')) {
			$('#reactionCheck').removeClass('fa-check-square');
			$('#reactionCheck').addClass('fa-square');
			$('#add_ol_form').hide();
		} else {
			$('#reactionCheck').removeClass('fa-square');
			$('#reactionCheck').addClass('fa-check-square');
			$('#add_ol_form').show();
		}
	}

	$('#add_rating_form').on('keypress', e => {
		if (e.keyCode == 13) {
			$('#add_rating_form').submit();
		}
	});

	$('.add-cw-img').on('click', e => {
		$(e.target).closest('form').submit();
	})

	media_type = '<%= media_type&.downcase %>'
	if (media_type) {
		$('.catchword-heading .media-options .option').addClass('not-active');
		$('.add-catchword .media-option').hide();
		$(`.${media_type}-option`).hide();
		$(`.add-catchword .${media_type}.media-option`).show();
		$(`.catchword-heading .media-options .${media_type}-option`).removeClass('not-active').addClass('active');
	} else {
		$('.catchword-option').hide();
		$('.catchword-heading .media-options .option').addClass('not-active');
		$('.catchword-heading .media-options .catchword-option').removeClass('not-active').addClass('active');
		$('.add-catchword .catchword.media-option').show();
	}


	var imageDropZone = $('.image-drop-zone')
	imageDropZone.on('drag dragstart dragend dragover dragenter dragleave drop', function (e) {
		e.preventDefault();
		e.stopPropagation();
	})
	imageDropZone.on('dragover dragenter', function () {
		$(this).addClass('is-dragover');
	})
	imageDropZone.on('dragleave dragend drop', function () {
		$(this).removeClass('is-dragover');
	})

	imageDropZone.on('drop', function (e) {
		if (e.originalEvent.dataTransfer.files[0]['type'].split('/')[0] === 'image') {
			global_method = 'imageDragDrop'
			global_event = e;
			global_file = e.originalEvent.dataTransfer.files;
			if (isOtherMediaExists()) {
				$('.warning-card-wrapper').show();
			} else {
				handleImageUpload(e);
			}
		}
	});

	function handleImageUpload(e) {
		let file_input = $(e.currentTarget).find('.image-fileinput');
		file_input[0].files = global_file;
		let file_name = $(file_input).val().split('\\').pop();
		let file_data = $(file_input)[0].files[0];
		let mimeType = file_data['type'];
		if (mimeType.split('/')[0] === 'image') {
			let url_object = URL.createObjectURL(file_data);
			$(e.currentTarget).siblings('.preview').find('img')[0].src = url_object;
			$('.left-card.selected img')[0].src = url_object;
			$(e.currentTarget).siblings('.preview').show();
			// $(e.currentTarget).hide();
			$('.image-drop-zone').hide();
			$('#add_image_form').submit();
		}
	}

	var videoDropZone = $('.video-drop-zone')
	videoDropZone.on('drag dragstart dragend dragover dragenter dragleave drop', function (e) {
		e.preventDefault();
		e.stopPropagation();
	})
	videoDropZone.on('dragover dragenter', function () {
		$(this).addClass('is-dragover');
	})
	videoDropZone.on('dragleave dragend drop', function () {
		$(this).removeClass('is-dragover');
	})

	videoDropZone.on('drop', function (e) {
		if (e.originalEvent.dataTransfer.files[0]['type'].split('/')[0] === 'video') {
			global_method = 'videoDragDrop'
			global_event = e;
			global_file = e.originalEvent.dataTransfer.files;
			if (isOtherMediaExists()) {
				$('.warning-card-wrapper').show();
			} else {
				handleVideoUpload(e);
			}
		}
	});

	function handleVideoUpload(e) {
		let file_input = $(e.currentTarget).find('.video-field');
		file_input[0].files = global_file;
		let file_name = $(file_input).val().split('\\').pop();
		let file_data = $(file_input)[0].files[0];
		let mimeType = file_data['type'];
		if (mimeType.split('/')[0] === 'video') {
			let url_object = URL.createObjectURL(file_data);
			let $preview = $(e.currentTarget).siblings('.preview')
			$preview.find('.video-tag')[0].src = url_object;
			// let taskId = $(e.target).closest('.task-fields').attr('id');
			// removeOtherMedia('video', taskId, false);
			$preview.find('.video-id').val('');
			$preview.show();
			$(e.currentTarget).hide();
			$('#add_video_form').submit();
		}
	}

	var audioDropZone = $('.audio-drop-zone')
	audioDropZone.on('drag dragstart dragend dragover dragenter dragleave drop', function (e) {
		e.preventDefault();
		e.stopPropagation();
	})
	audioDropZone.on('dragover dragenter', function () {
		$(this).addClass('is-dragover');
	})
	audioDropZone.on('dragleave dragend drop', function () {
		$(this).removeClass('is-dragover');
	})

	audioDropZone.on('drop', function (e) {
		global_file = e.originalEvent.dataTransfer.files;
		if (e.originalEvent.dataTransfer.files[0]['type'].split('/')[0] === 'audio') {
			global_method = 'audioDragDrop'
			global_event = e;
			if (isOtherMediaExists()) {
				$('.warning-card-wrapper').show();
			} else {
				handleAudioUpload(e);
			}
		}
	});

	function handleAudioUpload(e) {
		let file_input = $(e.currentTarget).find('.audio-field');
		file_input[0].files = global_file;
		let file_name = $(file_input).val().split('\\').pop();
		let file_data = $(file_input)[0].files[0];
		let mimeType = file_data['type'];
		if (mimeType.split('/')[0] === 'audio') {
			let url_object = URL.createObjectURL(file_data);
			let $preview = $(e.currentTarget).siblings('.preview')
			$preview.find('.audio-tag')[0].src = url_object;
			// let taskId = $(e.target).closest('.task-fields').attr('id');
			// removeOtherMedia('audio', taskId, false);
			$preview.find('.audio-id').val('');
			$preview.find('.audio-title').text(file_data.name);
			$preview.show();
			$(e.currentTarget).hide();
			$('#add_audio_form').submit();
		}
	}

	function looseFocus(event) {
		event.preventDefault();
		var formData = new FormData(document.getElementById('add_rl_form'));
		commitList('rating', formData);
	}
	$('#add_rl_form').on('submit', function (e) {
		e.preventDefault();
		var formData = new FormData(document.getElementById('add_rl_form'));
		commitList('rating', formData);
	})
	// showTaskMedia("<%= @task.task_medium&.media_type %>");

	function playAudio() {
		if ($('.audio-play-div .play-audio').hasClass('audio-play-circle')) {
			document.getElementById('task-audio').play();
			$('.audio-play-div .audio-play-circle').hide();
			$('.audio-play-div .audio-pause-circle').show();
		}
	}

	function pauseAudio() {
		if ($('.audio-play-div .pause-audio').hasClass('audio-pause-circle')) {
			document.getElementById('task-audio').pause();
			$('.audio-play-div .audio-pause-circle').hide();
			$('.audio-play-div .audio-play-circle').show();
		} 
	}

	function stopAudio() {
		$('.audio-play-div .audio-play-circle').show();
		$('.audio-play-div .audio-pause-circle').hide();
	}

	function showPopup() {
		$('#popup').show();
	}
	function hidePopup() {
		$('#popup').hide();
	}
	(function ($) {
		$.each(['show', 'hide'], function (i, ev) {
			var el = $.fn[ev];
			$.fn[ev] = function () {
				this.trigger(ev);
				return el.apply(this, arguments);
			};
		});
	})(jQuery);

	$('#image_upload_btn').on('click', function (e) {
		field_id = 'task_medium_image';
		global_method = 'upload';
		if (isOtherMediaExists()) {
			$('.warning-card-wrapper').show();
		} else {
			$('.warning-card-wrapper').hide();
			$('#task_medium_image').click();
		}
	})

	$('#video_upload_btn').on('click', function (e) {
		field_id = 'task_medium_video';
		global_method = 'upload';
		if (isOtherMediaExists()) {
			$('.warning-card-wrapper').show();
		} else {
			$('.warning-card-wrapper').hide();
			$('#task_medium_video').click();
		}
	})

	$('.add-video-link').on('click', function (e) {
		field_id = 'video_url';
		global_method = 'url';
		if (isOtherMediaExists()) {
			$('.warning-card-wrapper').show();
		} else {
			$('.warning-card-wrapper').hide();
			updateVideoUrl();
			// $('#task_medium_video').click();
		}
	})

	function updateVideoUrl() {
		var url = "<%= update_video_url_url(@pitch, task_id: @task&.id) %>";
		$.ajax({
			url: url,
			type: 'post',
			cache: false,
			async: true,
			contentType: false,
			processData: false,
			data: globalForm,
			beforeSend: function (xhr) { xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content')) },
			success: function (res) {
				$('#task_task_medium_id').val(res.id);
				$('#task_task_type').val(res.type);
				$('#task_<%= @task.id %> .task-title .category').text(res.type);
				if (res.type == 'image') {
					$('.picture .preview img').attr('src', res.preview);
					$('.picture .preview').show();
					$('#task_<%= @task.id %> .thumb img').attr('src', res.preview);
					$('#popup').hide();
				} else if (res.type == 'video') {
					$('.video .preview video').attr('src', res.preview);
					$('#task_<%= @task.id %> .thumb img').attr('src', res.thumb);
					$('.video .preview .time').text(res.duration);
					$('.video .preview').show();
				} else if (res.type == 'audio') {
					$('.audio .preview audio').attr('src', res.preview);
					$('#task_<%= @task.id %> .thumb img').attr('src', '<%= asset_path("dash/Image.png") %>');
					$('.audio .preview .audio-title').text(res.title)
					$('.audio .preview').show();
				}
				globalForm = new FormData();
			}
		})
	}

	$('#audio_upload_btn').on('click', function (e) {
		field_id = 'task_medium_audio';
		global_method = 'upload';
		if (isOtherMediaExists()) {
			$('.warning-card-wrapper').show();
		} else {
			$('.warning-card-wrapper').hide();
			$('#task_medium_audio').click();
		}
	})

	var inputAvatar = document.getElementById('task_medium_image');
	var image = document.getElementById('media_image');
	inputAvatar.addEventListener('change', function (e) {
		var files = e.target.files;
		var done = function (url) {
			inputAvatar.value = '';
			image.src = url;
			$('#popup').show();
		};
		var reader, file, url;
		if (files && files.length > 0) {
			file = files[0];
			if (URL) {
				done(URL.createObjectURL(file));
			} else if (FileReader) {
				reader = new FileReader();
				reader.onload = function (e) {
					done(reader.result);
				}
				reader.readAsDataURL(file);
			}
		}
	})
	$('#popup').on('show', function () {
		cropper = new Cropper(image, {
			aspectRatio: 1.77,
		});
	})
	$('#popup').on('hide', function () {
		cropper.destroy();
		cropper = null;
	})

	$('#crop').on('click', function () {
		var initialURL, canvas;
		if (cropper) {
			canvas = cropper.getCroppedCanvas({
				fillColor: "white",
				width: 500,
				height: 500,
			});
			canvas.toBlob(function (blob) {
				var date = new Date().getTime();
				var file = new window.File([blob], 'image_' + date + '.jpg', { type: 'image/jpg' });
				var formData = new FormData();
				formData.append("task_medium[media_type]", 'image');
				formData.append("task_medium[image]", file);
				$('#popup').hide();
				sendMedia(formData);
			});
		};
	})
	function showTaskMedia(type) {
		$('.btn-line .btn.selected').removeClass('selected')
		if (type == 'catchword' || type == '') {
			$('.add-catchword .catchword').show();
			$('.add-catchword .picture').hide();
			$('.add-catchword .video').hide();
			$('.add-catchword .audio').hide();
			$('.btn-line #btn_catchword').addClass('selected');
		} else if (type == 'image') {
			$('.add-catchword .catchword').hide();
			$('.add-catchword .picture').show();
			$('.add-catchword .video').hide();
			$('.add-catchword .audio').hide();
			$('.btn-line #btn_image').addClass('selected');
		} else if (type == 'video') {
			$('.add-catchword .catchword').hide();
			$('.add-catchword .picture').hide();
			$('.add-catchword .video').show();
			$('.add-catchword .audio').hide();
			$('.btn-line #btn_video').addClass('selected');
		} else if (type == 'audio') {
			$('.add-catchword .catchword').hide();
			$('.add-catchword .picture').hide();
			$('.add-catchword .video').hide();
			$('.add-catchword .audio').show();
			$('.btn-line #btn_audio').addClass('selected');
		}
	}
	$('#task_medium_video').on('change', function () {
		var globalForm = new FormData(document.getElementById('add_video_form'));
		sendMedia(globalForm);
	})
	$('#task_medium_audio').on('change', function () {
		var globalForm = new FormData(document.getElementById('add_audio_form'));
		sendMedia(globalForm);
	})
	function sendMedia(globalForm) {
		var url = "<%= create_task_media_url(@pitch, task_id: @task&.id) %>";
		$('#loaderModal').show();
		$.ajax({
			url: url,
			type: 'post',
			cache: false,
			async: true,
			contentType: false,
			processData: false,
			data: globalForm,
			beforeSend: function (xhr) { xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content')) },
			success: function (res) {
				$('#loaderModal').hide();
				$('#task_task_medium_id').val(res.id);
				$('#task_task_type').val(res.type);
				$('#task_<%= @task.id %> .task-title .category').text(res.type);
				if (res.type == 'image') {
					$('.picture .preview img').attr('src', res.preview);
					$('.picture .preview').show();
					$('#task_<%= @task.id %> .thumb img').attr('src', res.preview);
					$('#popup').hide();
				} else if (res.type == 'video') {
					$('.video .preview video').attr('src', res.preview);
					$('#task_<%= @task.id %> .thumb img').attr('src', res.thumb);
					$('.video .preview .time').text(res.duration);
					$('.video .preview').show();
				} else if (res.type == 'audio') {
					$('.audio .preview audio').attr('src', res.preview);
					$('#task_<%= @task.id %> .thumb img').attr('src', '<%= asset_path("dash/Image.png") %>');
					$('.audio .preview .audio-title').text(res.title)
					$('.audio .preview').show();
				}
				globalForm = new FormData();
			}
		})
	}

	function timeUp() {
		var time = parseInt($('#task_time').val());
		time += 5;
		$('#task_time').val(time);
		min = parseInt(time / 60);
		sec = Math.round(time % 60);
		if (sec < 10) { sec = '0' + sec }
		$('#set_task_time').text(min + ':' + sec)
		$('#task_<%= @task.id %> .thumb .length').text(min + ':' + sec);
	}
	function timeDown() {
		var time = parseInt($('#task_time').val());
		if (time > 5) { time -= 5; }
		$('#task_time').val(time);
		min = parseInt(time / 60);
		sec = Math.round(time % 60);
		if (sec < 10) { sec = '0' + sec }
		$('#set_task_time').text(min + ':' + sec);
		$('#task_<%= @task.id %> .thumb .length').text(min + ':' + sec);
	}



	// Audio Recording

	globalForm = new FormData();
	var audioChunks;
	var recording = false;
	$('.record').on('click', function (e) {
		global_method = 'audio';
		if (isOtherMediaExists() && !mediaDeleted) {
			$('.warning-card-wrapper').show();
		} else {
			$('.warning-card-wrapper').hide();
			if (recording) {
				$(e.target).text('Uploading...');
				if (rec.state === 'recording')
					rec.stop();
				recording = false;
			} else {
				// This will prompt for permission if not allowed earlier	
				let $preview = $(e.currentTarget).closest('.dropzone-container').siblings('.preview');
				let $dropZone = $(e.currentTarget).closest('.dropzone-container');
				var recordedAudio = $preview.find('audio')[0];
				navigator.mediaDevices.getUserMedia({ audio: true })
					.then(stream => {
						audioChunks = [];
						recording = true;
						$(e.target).text('Recording...');
						rec = new MediaRecorder(stream);
						rec.ondataavailable = e => {
							audioChunks.push(e.data);
							if (rec.state === "inactive") {
								stream.getTracks().forEach(track => track.stop())
								// $(recordedAudio).siblings('.audio-title').text('Task-audio.mp3')
								// $dropZone.siblings('input[type="file"]').val('')

								let blob = new Blob(audioChunks, { type: 'audio/x-mpeg-3' });
								recordedAudio.src = URL.createObjectURL(blob);
								recordedAudio.controls = true;

								blob = new Blob(audioChunks, { type: 'audio/webm' });
								var file = new window.File([blob], ["audio", (new Date() + '').slice(4, 28), '.mp3'].join(''))
								globalForm.append('task_medium[audio]', file);
								globalForm.append('task_medium[media_type]', 'audio');
								sendMedia(globalForm);
								mediaDeleted = false;
							}
						}
						rec.start();
					})
					.catch(function (err) { alert('Kann Audio nicht aufnehmen!') });
			}
		}
	})



	// Video Recording

	$('.record-video').click(function (e) {
		global_method = 'video';
		if (isOtherMediaExists()) {
			$('#videoModal').hide();
			$('.warning-card-wrapper').show();
		} else {
			$('.warning-card-wrapper').hide();
			$('#videoModal').show();
		}
	})


	function isOtherMediaExists() {
		let is_media_present = false;
		if ($('.catchword-heading .media-options .active span').text().toLowerCase() === 'catchword') {
			is_media_present = <%= @task.task_medium.present? %>
		} else {
			is_media_present = <%= @task.catchword_list&.catchwords&.present? || @task.task_medium.present? %>
		}
		return is_media_present
	}


	function deleteMedia() {
		var url = "<%= delete_task_media_url(@pitch, task_id: @task&.id) %>";
		$.ajax({
			url: url,
			type: 'delete',
			cache: false,
			async: true,
			contentType: false,
			processData: false,
			data: globalForm,
			beforeSend: function (xhr) { xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content')) },
			success: function (res) {
			}
		})
	}


</script>