<section id="new-pitch-navbar">
    <h1>Pitch erstellen</h1>
    <div class="form-group">
        <input type="text" placeholder="Type pitch name here" data-modal="pitchModal" class="open-modal form-field"
            readonly>
        <button class="btn done-btn open-modal" data-modal="pitchModal">Regeln</button>
    </div>
    <div class="btn-group">
        <%= link_to 'Exit', dashboard_pitches_path, class: 'btn reversed'%>
        <button class="btn done-btn open-modal" data-modal="pitchModal">Done</button>
    </div>
</section>

<div id="new-pitch-content">

    <div class="card left">
        <div class="tasks" id="tasksScrollBar">
            <% if @pitch.persisted? %>
            <% @pitch.tasks.each_with_index do |task, index| %>
            <div class="card left-card <%= 'selected' if index == 0 %>" onclick="handleCardClick(this)">
                <div class="task-title">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div class="name">Task</div>
                    <i class="fas fa-circle"></i>
                    <div class="category">Video</div>
                    <i class="fas fa-trash remove"></i>
                    <i class="fas fa-copy copy"></i>
                </div>
                <div class="thumb">
                    <% if task.image? %>
                    <%= image_tag task.image.url %>
                    <% else %>
                    <%= image_tag 'dash/Image.png' %>
                    <% end %>
                    <div class="length"><%= task.time %></div>
                </div>
                <div class="title"><%= task.title %></div>
                <div class="sub-title">Rating Criteria</div>
                <div class="rating-criteria">
                    <% task.ratings.split(',').each do |rating| %>
                    <div class="criterium"><%= rating %></div>
                    <% end %>
                </div>
            </div>
            <% end %>
            <% else %>
            <div class="form-group add-first-task">
                <button class="btn">Add first task</button>
            </div>
            <% end %>
        </div>
        <div class="menu-box">
            <div class="menu menu-1">Add task</div>
            <div class="menu task-pitch">Add task from existing pitch</div>
            <div class="menu menu-1">Import PDF</div>
        </div>
        <div class="add-task">
            <%= image_tag 'dash/icons/circle-plus-green.svg', class: 'add-task-img' %>
        </div>

    </div>

    <%
        editForm = @pitch.persisted?
        form_url = editForm ? dashboard_pitch_path : dashboard_pitches_path

    %>

    <div class="card right">
        <%#= render partial: 'new_pitch_content', locals: { pitch: @pitches } %>
        <%= form_for @pitch, url: form_url, html: {id: 'new_pitch_form'} do |f| %>
        <%= f.hidden_field :user_id, value: @admin.id %>

        <%= f.fields_for :tasks do |task| %>
        <%= render 'task_fields', f: task %>
        <% end %>

        <%= link_to_add_association 'Add task', f, :tasks, class: 'add-link hide', partial: 'task_fields' %>

        <%= render partial: 'pitch_modal', locals: { pitch: f }%>
        <% end %>
        <%= render 'browse_tasks' %>
    </div>

    <div id="videoModal" class="modal hide">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div class="heading">
                <h1>Record your video</h1>
            </div>
            <div class="inner-content">
                <div class="video-img">
                    <%= image_tag 'dash/Video.png' %>
                </div>
                <div class="buttons">
                    <a href="" class="btn reversed">Cancel</a>
                    <a href="" class="btn">Upload</a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- FIXME: -->
<!-- capsules cards height -->

<script>

    // new PerfectScrollbar('#scrollList');
    new PerfectScrollbar('#tasksScrollBar');

    var task_ids = [1];
    var clonning = false;
    var isTaskRemoved = false;
    var taskHeaderImg = "<%= asset_path 'dash/Image.png' %>";

    $(document).on('ready turbolinks:load', () => {

        if ('<%= editForm %>' === 'true') {
            $('.task-fields:first').removeClass('hide');
            let counter = 0;
            let length = $('.task-fields').length;
            let id = 1;
            while (counter < length) {
                $(`.task-fields`)[counter].id = `form_${id}`;
                $('.card.left .card')[counter].id = id;
                id += 1;
                counter += 1;
            }
        }

        $('form').on('keypress', e => {
            if (e.keyCode == 13) {
                return false;
            }
        });

        $('.add-first-task .btn').unbind().on('click', (e) => {
            $(e.target).closest('.add-first-task').hide()
            if (task_ids.length) {
                $('#form_1').show();
                createCard(1);
            } else {
                $('.add-link').click()
            }
        })

        hideDropdown()

        $('.task-pitch').click(function () {
            $('#new-pitch-content .card.right #pitches').show()
            $('#new_pitch_form').hide();
            $('.menu-box').hide()
        })

        $('.video-record').click(function () {
            $('#videoModal').show()
        })

        $('.submit').click(function (e) {
            $('form').submit();
        })


        $(document).click(function (e) {
            if ($(e.target).hasClass('cw')) {
                if ($('.obj .sub-cs').is(":visible")) {
                    hideDropdown(".obj");
                }
                $('.cw .sub-cs').toggle()
                $('.menu-box').hide()

            } else if ($(e.target).hasClass('obj')) {
                if ($('.cw .sub-cs').is(":visible")) {
                    hideDropdown(".cw");
                }
                $('.obj .sub-cs').toggle()
                $('.menu-box').hide()

            } else if ($(e.target).hasClass('add-task-img')) {
                $('.menu-box').toggle()
                $('.cw .sub-cs').hide()
                $('.obj .sub-cs').hide()
            } else {
                hideDropdown()
            }
        })

        // Nested Attributes

        $('form').on('cocoon:after-insert', function (e, insertedItem) {
            console.log('cocoon')
            let text_array = $(insertedItem).children('input:first').attr('id').split('_')
            let id = parseInt(text_array[3])
            task_ids.push(id)
            $('.task-fields:first').attr('id', `form_${id}`)
            if (clonning) {
                $('#new_pitch_form .task-fields:first').after($(insertedItem))
            } else {
                $('#new_pitch_form').prepend($(insertedItem))
                createCard(id);
                hideAllTasks();
                showTask(id);
                scrollToTask(id);
            }
        });

        $('.menu-box .menu-1').on('click', function () {
            if (task_ids.length) {
                if ($('.add-first-task').is(':visible')) {
                    $('#form_1').show();
                    $('.add-first-task').hide()
                    createCard(1);
                } else {
                    let selected_card = $('.left-card.selected')
                    let id = $(selected_card).attr('id')
                    $(selected_card).removeClass('selected')
                    $('.add-link').click()
                }
            } else {
                $('.add-first-task').hide()
                $('.add-link').click()
            }
            $('.menu-box').toggle()

        })

        $('.show-ratings-container .checkmark').on('click', (e) => {
            let $that = $(e.target);
            if (!$that.siblings('input[type="checkbox"]').is(":checked")) {
                let value = $that.attr('data-value');
                $('.show-ratings-container').find(":checkbox:checked").removeAttr('checked');
                $('.show-ratings-container').find('.rating-container').removeClass('rating-container');
                $that.closest('.container').addClass('rating-container');
                $('#show_ratings').attr('value', value);
                $that.siblings('input[type="checkbox"]').attr("checked", "checked");
            }
        })

        $('.open-modal').click(function (e) {
            if ($(e.currentTarget).attr('data-modal') == 'pitchModal') {
                if ($('.add-first-task').is(':visible')) {
                    return false;
                }
            }
            e.stopPropagation();
            let modalId = $(this).data("modal");
            let $modal = $("#" + modalId);
            $modal.show();
        })

        $('.close').click(function () {
            $('.modal').hide()
        })

    })

    function hideAllTasks() {
        $('.left-card').removeClass('selected');
        $('#new_pitch_form .task-fields').hide();
    }

    function showTask(id) {
        $(`#content #form_${id}`).show();
        $(`#${id}`).addClass('selected');
    }

    function scrollToTask(id) {
        let $container = $('#tasksScrollBar');
        let $scrollTo = $(`#${id}`);
        $container.scrollTop(
            $scrollTo.offset().top - $container.offset().top + $container.scrollTop()
        );
    }

    var getLastId = () => {
        return task_ids[task_ids.length - 1]
    }

    function chooseOption(type, event) {
        let $that = $(event.target);
        $that.siblings('#media_option').val(type);
        $that.closest('.add-catchword').find('.btn-line .btn.selected').removeClass('selected');
        $that.closest('.add-catchword').find('.media-option').hide();
        $that.closest('.add-catchword').find(`#btn_${type}`).addClass('selected');
        $that.closest('.add-catchword').find(`.${type}`).show();
        $('.left-card.selected .category').text($(event.target).text())
    }

    var timeUp = (e) => {
        let id = $(e).closest('.task-fields').attr('id')
        let time_field = $(`#${id}`).find('#task_time')
        let display_time = $(`#${id}`).find('#settime')
        let value = $(time_field).val();
        if (value < 1800) {
            value = parseInt(value);
            value = value + 5;
            let min = Math.floor(value / 60).toString();
            let sec = Math.floor(value % 60).toString();
            if (sec == '0') { sec = '00' }
            if (sec == '5') { sec = '05' }
            $(display_time).text(min + ':' + sec);
            $(time_field).val(value);
        }
        let selected_card = $('.left-card.selected')
        if ($(selected_card).length) {
            let id = $(selected_card).attr('id')
            $(`#${id} .length`).text(value)
        }
    }

    var timeDown = (e) => {
        let id = $(e).closest('.task-fields').attr('id')
        let time_field = $(`#${id}`).find('#task_time')
        let display_time = $(`#${id}`).find('#settime')
        let value = $(time_field).val();
        if (value > 10) {
            value = parseInt(value);
            value = value - 5;
            let min = Math.floor(value / 60).toString();
            let sec = Math.floor(value % 60).toString();
            if (sec == '0') { sec = '00' }
            if (sec == '5') { sec = '05' }
            $(display_time).text(min + ':' + sec);
            $(time_field).val(value);
        }
        let selected_card = $('.left-card.selected')
        if ($(selected_card).length) {
            let id = $(selected_card).attr('id')
            $(`#${id} .length`).text(value)
        }
    }

    function showList(e) {
        $(e).children().show();
    }

    function hideList(e) {
        $(e).find('.list').hide();
    }

    var handleCardClick = (e) => {
        if (!clonning && !isTaskRemoved) {
            console.log('handleClick')
            hideAllTasks()
            showTask($(e).attr('id'))
        }
        clonning = false;
        isTaskRemoved = false;
    }

    var removeTask = (e) => {
        let id = $(e).closest('.left-card').attr('id')
        $(`#form_${id}`).remove()
        $(`#${id}`).remove()
        let index = task_ids.indexOf(parseInt(id));
        task_ids = [...task_ids.slice(0, index), ...task_ids.slice(index + 1, task_ids.length)]
        if (task_ids.length) {
            let id = $('.left-card:first').attr('id')
            showTask(id)
            scrollToTask(id)
        } else {
            $('.add-first-task').show();
        }
        isTaskRemoved = true
    }

    var cloneTask = (e) => {
        console.log('cloneTask')
        clonning = true
        let id = $(e).closest('.left-card').attr('id');
        $('.add-link').click()
        createTaskCopy(id)
        hideAllTasks();
        showTask(id);
    }

    var createTaskCopy = (id) => {
        console.log('createTaskCopy')
        let sourceTaskId = id
        let targetTaskId = getLastId()
        copyTaskFormData(targetTaskId, sourceTaskId)
        createCard(targetTaskId)
    }

    FIXME:
    // task_time, #set_time id duplication 
    function copyTaskFormData(targetTaskId, sourceTaskId) {
        console.log('copyFormData')
        let $sourceTaskId = $(`#form_${sourceTaskId}`)
        $(`#form_${targetTaskId} .title-form-field`).val($sourceTaskId.find('.title-field').val())
        $(`#form_${targetTaskId} #task_time`).val($sourceTaskId.find('#task_time').val())
        $(`#form_${targetTaskId} #set_time`).text($sourceTaskId.find('#set_time').text())
        $(`#form_${targetTaskId} .catchword .capsule-ids-field`).val($sourceTaskId.find('.catchword .capsule-ids-field').val())
        $(`#form_${targetTaskId} .add-reaction .capsule-ids-field`).val($sourceTaskId.find('.add-reaction .capsule-ids-field').val())
        $(`#form_${targetTaskId} #media_option`).val($sourceTaskId.find('#media_option').val())

        let fields = ['.catchword', '.add-reaction', '.add-rating']
        let hidden_fields = ['.cw-hidden-field', '.reaction-hidden-field', '.rating-hidden-field']
        for (let i = 0; i < fields.length; i++) {
            let field_values = $sourceTaskId.find(hidden_fields[i]).val()
            $(`#form_${targetTaskId} ${hidden_fields[i]}`).val(field_values)
            let word_div_list = ''
            let $capsule_list = $(`#form_${sourceTaskId} ${fields[i]} .capsule-list .word`)
            $capsule_list.each(index => {
                word_div_list += $capsule_list[index].outerHTML
            })
            $(`#form_${targetTaskId} ${fields[i]} .capsule-list`).append(word_div_list)
        }

        let media_options = ['picture', 'video', 'audio']
        let attributes = ['image', 'video', 'audio']
        let counter = 0
        media_options.forEach(media => {
            $cloneData = $(`#form_${sourceTaskId}`).find(`.${media}.media-option`).clone();
            $(`#form_${targetTaskId}`).find(`.${media}.media-option`).remove();
            $(`#form_${targetTaskId} .card.add-catchword`).append($cloneData);
            $(`#form_${targetTaskId} .${media}.media-option input[type="file"]`).attr('id', `pitch_tasks_attributes_${targetTaskId}_${attributes[counter]}`);
            $(`#form_${targetTaskId} .${media}.media-option input[type="file"]`).attr('name', `pitch[tasks_attributes][${targetTaskId}][${attributes[counter]}]`);
            if (media === 'audio') {
                $(`#form_${targetTaskId} .${media}.media-option .audio-id`).attr('id', `pitch_tasks_attributes_${targetTaskId}_audio_id`);
                $(`#form_${targetTaskId} .${media}.media-option .audio-id`).attr('name', `pitch[tasks_attributes][${targetTaskId}][audio_id]`);
            }
            if ($(`#form_${sourceTaskId} #btn_${media}`).hasClass('selected')) {
                $(`#form_${targetTaskId} .btn-line .btn`).removeClass('selected')
                $(`#form_${targetTaskId} .add-catchword .media-option`).hide()
                $(`#form_${targetTaskId} #btn_${media}`).addClass('selected')
                $(`#form_${targetTaskId} .add-catchword .${media}`).show()
            }
            counter += 1;
        })
    }

    function checkTaskData(e) {
        let id = $(e.target).length ? ($(e.target).closest('.task-fields').attr('id').split('_')[1]) : ($(e).closest('.task-fields').attr('id').split('_')[1])
        if (isTaskDataFilled(id))
            $(`#${id} .fa-exclamation-triangle`).hide()
        else
            $(`#${id} .fa-exclamation-triangle`).show()
    }

    function isTaskDataFilled(id) {
        let status = true
        let fields = ['.cw-hidden-field', '.reaction-hidden-field', '.rating-hidden-field', '.title-form-field']
        let id_fields = ['.cw-ids-field', '.reaction-ids-field']
        let task_form = `#form_${id}`
        let counter = 0;
        fields.forEach(field => {
            if (counter === 0 || counter === 1) {
                isValuePresent = $(`${task_form} ${field}`).val().length || $(`${task_form} ${id_fields[counter]}`).val().length
                if (!isValuePresent) {
                    status = false;
                }
            } else {
                if (!$(`${task_form} ${field}`).val().length) {
                    status = false;
                }
            }
            counter += 1;
        })
        return status
    }

    function hideWarning(id) {
        $(`#${id} .fa-exclamation-triangle`).hide()
    }

    function showWarning(id) {
        $(`#${id} .fa-exclamation-triangle`).show()
    }

    var hideDropdown = (parent = '') => {
        if (parent != '') {
            $('.sub-cs').hide()
            $('.list').hide()
        } else {
            $(`${parent} .sub-cs`).hide()
            $(`${parent} .list`).hide()
            $('.menu-box').hide()
        }
    }

    function createCard(taskId) {
        let rating_values = $(`#form_${taskId} .add-rating .capsule-field`).val()
        let title = `#form_${taskId} .title-field`
        let time = `#form_${taskId} #task_time`
        let card = `<div class="card left-card selected" id="${taskId}" onclick="handleCardClick(this)">`;
        card += '<div class="task-title">';
        let showWarning = isTaskDataFilled(taskId) ? 'none' : 'block'
        card += `<i class="fas fa-exclamation-triangle" style="display: ${showWarning}"></i>`;
        card += `<div class="name name-div">Task</div>`;
        card += '<i class="fas fa-circle"></i>';
        let $category = $(`#form_${taskId} .btn.selected`).text()
        card += `<div class="category">${$category}</div>`;
        card += '<i class="fas fa-trash remove" onclick="removeTask(this)"></i>';
        card += '<i class="fas fa-copy copy" onclick="cloneTask(this)"></i>';
        card += '</div>';
        card += '<div class="thumb">';
        let $mediaImg = $(`#form_${taskId} .picture.media-option img`);
        if ($mediaImg[0].src) {
            card += `<img src='${$mediaImg[0].src}'>`
        } else {
            card += "<%= escape_javascript image_tag 'dash/Image.png' %>";
        }
        card += `<div class="length">${$(time).val()}</div>`;
        card += '</div>';
        card += `<div class="title title-field">${$(title).val()}</div>`;
        card += '<div class="sub-title">Rating Criteria</div>';
        card += '<div class="rating-criteria">';
        if (rating_values.length) {
            ratings = rating_values.split(',')
            if (ratings.length > 0)
                card += `<div class="criterium">${ratings[0]}</div>`;
            if (ratings.length > 1)
                card += `<div class="criterium">${ratings[1]}</div>`;
            if (ratings.length > 2)
                card += `<div class="criterium">${ratings[2]}</div>`;
            if (ratings.length > 3)
                card += `<div class="criterium">${ratings[3]}</div>`;
        }
        card += '</div>';
        card += '</div>';

        $('.left .tasks').append(card);

    }


    var handleKeyEvent = (e) => {
        let selected_card = $('.left-card.selected')
        if ($(selected_card).length) {
            $(selected_card).find('.title').text($(e).val())
            checkTaskData(e)
        }
    }

    function createCapsule(target_field, value, e) {
        let capsule_list = $(e.target).closest('.form-group').siblings('.capsule-list')
        // $(capsule_list).addClass('list-with-words');
        let word = $(`<div class="word">${value}</div>`);
        let field_vlaues = $(target_field).val()
        if (field_vlaues != "") {
            let field_array = JSON.parse(field_vlaues)
            let matched_array = field_array.filter(word => { return word.toLowerCase() === value.toLowerCase() })
            if (!matched_array.length) {
                field_array.push(value)
                $(target_field).val(JSON.stringify(field_array))
                $(capsule_list).append(word)
            }
        } else {
            $(target_field).val(JSON.stringify(Array(value)))
            $(capsule_list).append(word)
        }
    }

    var addRatingValue = (e, form_field = '') => {
        let target_field = $(e.target).siblings('.capsule-field');
        if (form_field == '') {
            form_field = $(e.target).siblings('.form-field');
        }
        let value = form_field.val();
        let words_array = $(target_field).val().split(',');
        let matched_array = words_array.filter(word => { return word.toLowerCase() === value.toLowerCase() })
        if (value.length && (words_array.length < 4) && (!matched_array.length)) {
            $(e.target).closest('.card.add-rating').css('height', '28vh');
            createCapsuleName(target_field, value, e)

            let criterium = $(`<div class="criterium">${form_field.val()}</div>`);
            let selected_card = $('.left-card.selected')
            if ($(selected_card).length) {
                $(selected_card).find('.rating-criteria').append(criterium)
            }

            checkTaskData(e)
            $(form_field).val("")
            e.preventDefault();
            return false;

        }
    }

    function createCapsuleName(target_field, value, e) {
        let capsule_list = $(e.target).closest('.form-group').siblings('.capsule-list')
        let word = $(`<div class="word">${value}</div>`);
        if ($(target_field).val() != "") {
            $(target_field).val($(target_field).val() + "," + value)
            $(capsule_list).append(word)
        } else {
            $(target_field).val(value)
            $(capsule_list).append(word)
        }
    }

    function removeMedia(e, type = '') {
        let $mediaBox = $(e.target).closest('.preview')
        $mediaBox.hide()
        $mediaBox.siblings('input[type="file"]').val('')
        if (type == 'audio') {
            $mediaBox.find('audio').attr('src', '')
            $mediaBox.siblings('.audio-id').val('')
        } else if (type == 'video') {
            $mediaBox.find('video').attr('src', '')
        } else {
            $('.left-card.selected img')[0].src = taskHeaderImg;
        }
    }

    function loadMetaData(e) {
        const video_duration = new Date($(e.target)[0].duration * 1000).toISOString().substr(11, 8)
        $(e.target).siblings('.time').text(video_duration);
    }


    function loadFile(e, type = '') {
        const id = $(e.target).attr('id');
        let mediaBox = $(`#${id}`).closest('.media-option').find('.preview');
        let file = event.target.files[0];
        if (type === 'video') {
            let $video_tag = $(e.target).siblings('.preview').find('video');
            $video_tag[0].src = URL.createObjectURL(file);
            $video_tag.show();
        } else if (type === 'audio') {
            let $preview = $(event.target).siblings('.preview');
            $preview.siblings('.audio-id').val('');
            $preview.find('.audio-title').text(file.name);
            $preview.find('audio')[0].src = URL.createObjectURL(file);
        } else {
            let $img = $(mediaBox).find('img');
            let url_object = URL.createObjectURL(file);
            $img[0].src = url_object;
            if (type === 'task-img')
                $('.left-card.selected img')[0].src = url_object;
        }
        $(mediaBox).show();
    }

</script>